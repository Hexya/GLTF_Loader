(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/Applications/MAMP/htdocs/GLTFLoaderDress/js/app.js":[function(require,module,exports){
'use strict';

var Main = require('./main.js');

var wrapper = $('body');

if (wrapper.length > 0) {
    new Main();
}

},{"./main.js":"/Applications/MAMP/htdocs/GLTFLoaderDress/js/main.js"}],"/Applications/MAMP/htdocs/GLTFLoaderDress/js/config.js":[function(require,module,exports){
"use strict";

module.exports = {
  model: '',
  degradeColor: ["#FFFFFF", "#BFBFBF", "#808080", "#404040", "#000000", "#C47DFA", "#D78BFB", "#EB99FD", "#FFA8FF", "#FF70FF", "#FF38FF", "#FF00FF", "#D300D3", "#A800A8", "#7D007D", "#9325A6", "#A94BD0", "#BF71FA", "#B24BFB", "#A525FD", "#9900FF", "#7100C4", "#4A008A", "#5C34C3", "#6F68FC", "#3E34FD", "#0D00FF", "#0A00CC", "#080099", "#537AC9", "#9EF5FA", "#4FFAED", "#00FFE1", "#01CEBF", "#039E9E", "#36CC8D", "#69FA7C", "#34FC4F", "#00FF22", "#00B91C", "#007317", "#7FB756", "#FFFC96", "#FFF54B", "#FFEE00", "#C5B800", "#8C8300", "#C3A938", "#FACF71", "#FCAB38", "#FF8800", "#DC7100", "#BA5A00", "#D8774A", "#F79494", "#FB4A4A", "#FF0000", "#C20000", "#850000", "#C27F7F"],
  dressColor: ["#FFFFFF", "#DFDFDF", "#BFBFBF", "#9F9F9F", "#7F7F7F", "#5F5F5F", "#3F3F3F", "#1F1F1F", "#000000", "#1F001F", "#3F003F", "#5F005F", "#7F007F", "#9F009F", "#BF00BF", "#DF00DF", "#FF00FF", "#EE00FF", "#DE00FF", "#CD00FF", "#BD00FF", "#AC00FF", "#9C00FF", "#8B00FF", "#7B00FF", "#6F00FF", "#6400FF", "#5900FF", "#4E00FF", "#4300FF", "#3800FF", "#2D00FF", "#2200FF", "#1D1DFF", "#193AFF", "#1557FF", "#1175FF", "#0C92FF", "#08AFFF", "#04CCFF", "#00EAFF", "#00ECE7", "#00EFCF", "#00F1B7", "#00F49F", "#00F787", "#00F96F", "#00FC57", "#00FF40", "#1FFF38", "#3FFF30", "#5FFF28", "#7FFF20", "#9FFF18", "#BFFF10", "#DFFF08", "#FFFF00", "#FFDF00", "#FFBF00", "#FF9F00", "#FF7F00", "#FF5F00", "#FF3F00", "#FF1F00", "#FF0000"],
  skinColor: ["#FFDFC2", "#FFE0CB", "#FFE2D4", "#FDD5C1", "#FCC8AE", "#FFE682", "#EED571", "#DDC460", "#CCB34F", "#C9A05E", "#DCC268", "#ECD281", "#FCE29A", "#F8D983", "#F5D16D", "#F2C957", "#C19133", "#915910", "#6D460B", "#4A3406", "#342504", "#2d1f01"],
  hairColor: ["#FAF0A3", "#FCE851", "#FFE100", "#AC9400", "#594700", "#6C4A00", "#804D00", "#503100", "#211500", "#100A00", "#000000", "#7F7F7F", "#FFFFFF", "#FFD2FF", "#FFA6FF", "#D5D2FC", "#ABFFF9", "#D5849E", "#FF0A43", "#D759A1", "#AFA8FF", "#8E54FA", "#6E00F5", "#837BD4", "#99F7B4", "#6DE694", "#42D674", "#A0C372", "#FFB070", "#FF7B00"],
  eyesColor: ["#AD6828", "#9C5B21", "#8B4E1B", "#7A4215", "#512C0E", "#281607", "#000000", "#555555", "#AAAAAA", "#FFFFFF", "#ACE6FD", "#5ACDFB", "#08B5FA", "#0DB5B1", "#12B568", "#17B51F", "#10953B", "#097558", "#51A084", "#99CCB0"]
};

},{}],"/Applications/MAMP/htdocs/GLTFLoaderDress/js/main.js":[function(require,module,exports){
'use strict';

var container, stats, controls;
var camera, scene, renderer, light, mixer;
var clock = new THREE.Clock();
var config = require('./config');
var UserUpdate = require('./userUpdate');

var Main = function Main() {
    var _this = this;

    this.init = function () {
        this.initScene();
        this.animate();
    };

    this.initScene = function () {

        this.container = document.createElement('div');
        this.container.classList.add("model-cont");
        document.body.appendChild(this.container);

        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.25, 20);
        camera.position.set(0, 0, 3);

        //controls = new THREE.OrbitControls( camera );
        //controls.target.set( 0, -0.2, -0.2 );

        scene = new THREE.Scene();
        // PLANE
        var planeGeometry = new THREE.CircleBufferGeometry(0.5, 25);
        var planeMaterial = new THREE.MeshStandardMaterial();
        var herbsMaterial = new THREE.TextureLoader().load('texture/herbs.jpg');
        planeMaterial.map = herbsMaterial;
        var plane = new THREE.Mesh(planeGeometry, planeMaterial);
        plane.receiveShadow = true;
        plane.position.set(0.2, -0.7, 0.1);
        plane.rotation.x = -0.5 * Math.PI;
        scene.add(plane);

        // CONTOUR
        var torusGeometry = new THREE.TorusGeometry(0.5, 0.04, 10, 50);
        var torusMaterial = new THREE.MeshBasicMaterial('red');
        var metMaterial = new THREE.TextureLoader().load('texture/bmet.jpg');
        torusMaterial.map = metMaterial;
        var torus = new THREE.Mesh(torusGeometry, torusMaterial);
        torus.position.set(0.2, -0.7, 0.1);
        torus.rotation.x = -0.5 * Math.PI;
        torus.name = 'Torus';
        scene.add(torus);

        // LIGHT
        light = new THREE.HemisphereLight(0xbbbbff, 'rgb(232, 196, 99)');
        light.position.set(20, 0, 0);
        scene.add(light);

        light = new THREE.DirectionalLight(0xffffff);
        light.position.set(-40, 60, -10);
        scene.add(light);

        //LOADER MODEL
        this.loaded(plane, torus);

        // RENDERER
        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setClearColor(0xffffff, 0);
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        //renderer.setClearColor(new THREE.Color(0xEEEEEE));
        renderer.gammaOutput = true;
        this.container.appendChild(renderer.domElement);

        window.addEventListener('resize', this.onWindowResize, false);

        // STATS
        stats = new Stats();
        this.container.appendChild(stats.dom);
    };

    //LOADER
    this.loaded = function (plane, torus) {
        // MODEL
        var loader = new THREE.GLTFLoader();
        loader.load('model/dressed.gltf', function (gltf) {

            // ALL ELEMENT SCENE
            var persona = gltf.scene;
            config.model = persona;

            persona.scale.set(0.08, 0.08, 0.08);
            persona.position.set(0.2, -0.7, 0);
            persona.rotation.set(0, 3, 0);
            persona.castShadow = true;
            scene.rotation.set(0.5, -0.5, 0);

            // COLOR CHILD OF THE SCENE
            persona.traverse(function (child) {
                var modelPart = child.name;
                switch (modelPart) {
                    case 'body':
                        child.material.color = new THREE.Color('rgb(236, 217, 188)');
                        //child.material.emissive = new THREE.Color('rgb(201, 160, 94)');
                        child.material.emissive = new THREE.Color('rgb(193, 145, 51)');
                        break;
                    case 'hair':
                        child.material.color = new THREE.Color('pink');
                        //child.material.emissive = new THREE.Color('black'); //brown
                        child.material.emissive = new THREE.Color('rgb(252, 232, 81)');
                        break;
                    case 'eye':
                        child.material.color = new THREE.Color('rgb(131, 236, 239)');
                        break;
                    case 'robe':
                        //child.material.emissive = new THREE.Color('red');
                        child.material.emissive = new THREE.Color('rgb(0, 244, 159)');
                        break;
                    case 'robeFrou':
                        child.material.emissive = new THREE.Color('white');
                        break;
                    case 'shoe_2subdiv_shoe.001_0' || 'shoe_2subdiv_shoe.001_1':
                        child.material.color = new THREE.Color('white');
                        break;
                    case 'shoe_2subdiv_shoe.001_3':
                        child.material.color = new THREE.Color('grey');
                        break;
                }
                // console.log('Name: '+ child.name);
            });

            // ANIMATIONS
            var animations = gltf.animations;

            if (animations && animations.length) {
                // console.log(animations);

                // DETAILS
                var talking = function talking() {
                    tPose.play();
                    talk.play();
                    plane.scale.set(1, 1, 1);
                    torus.scale.set(1, 1, 1);
                    plane.position.set(0.2, -0.7, 0.1);
                    torus.position.set(0.2, -0.7, 0.1);
                };

                var stretching = function stretching() {
                    tPose.play();
                    stretch.play();
                    plane.scale.set(1, 1, 1);
                    torus.scale.set(1, 1, 1);
                    plane.position.set(0.2, -0.8, 0.1);
                    torus.position.set(0.2, -0.8, 0.1);
                };

                var walking = function walking() {
                    tPose.play();
                    walk.play();
                    plane.scale.set(1.5, 1.5, 1.5);
                    torus.scale.set(1.5, 1.5, 1.5);
                    plane.position.set(0, -0.7, 0.1);
                    torus.position.set(0, -0.7, 0.1);
                };

                var posing = function posing() {
                    tPose.play();
                    action.stop();
                    plane.scale.set(1, 1, 1);
                    torus.scale.set(1, 1, 1);
                    plane.position.set(0.2, -0.7, 0.1);
                    torus.position.set(0.2, -0.7, 0.1);
                };
                // AFFECTATION TOUCHE


                mixer = new THREE.AnimationMixer(persona);

                var talk = mixer.clipAction(animations[1]);
                var stretch = mixer.clipAction(animations[2]);
                var tPose = mixer.clipAction(animations[3]);
                var walk = mixer.clipAction(animations[4]);window.onkeydown = function (e) {
                    var key = e.keyCode || e.which;
                    for (var i = 0; i < animations.length; i++) {
                        // action.stop();
                        // tPose.play();
                        mixer._nActiveActions = 0;
                        //tPose.play();

                        switch (key) {
                            case 37:
                                //left talk
                                talking();
                                break;
                            case 39:
                                //right ninja
                                stretching();
                                break;
                            case 38:
                                //top walk
                                walking();
                                break;
                            case 32:
                                //space tPose
                                posing();
                                break;
                        }
                    }
                };

                // Update user container
                var userUpdate = new UserUpdate(scene, persona, camera, talking, walking, stretching, mixer);
            }
            scene.add(persona);
        });
    };

    // RESIZE
    this.onWindowResize = function () {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize(window.innerWidth, window.innerHeight);
    };

    // UPDATE
    this.animate = function () {

        requestAnimationFrame(_this.animate);

        if (mixer) mixer.update(clock.getDelta());

        renderer.render(scene, camera);

        stats.update();
    };
    this.init();
};

module.exports = Main;

},{"./config":"/Applications/MAMP/htdocs/GLTFLoaderDress/js/config.js","./userUpdate":"/Applications/MAMP/htdocs/GLTFLoaderDress/js/userUpdate.js"}],"/Applications/MAMP/htdocs/GLTFLoaderDress/js/template/update.tpl":[function(require,module,exports){
module.exports = '<div class="color-container">' +
    '<p>Custom</p>' +
    '<div class="elem-cont"> Hair:' +
        '<div class="blocs hair-blocs" data-type="hair">' +
            '</div>' +
        '</div>' +
    '<div class="elem-cont"> Skin:' +
        '<div class="blocs skin-blocs" data-type="body">' +
            '</div>' +
        '</div>' +
    '<div class="elem-cont"> Eyes:' +
        '<div class="blocs eyes-blocs" data-type="eye">' +
            '</div>' +
        '</div>' +
    '<div class="elem-cont"> Dress:' +
        '<div class="blocs robe-blocs" data-type="robe">' +
            '</div>' +
        '</div>' +
    '<div class="elem-cont"> Top dress:' +
        '<div class="blocs top-dress-blocs" data-type="robeFrou">' +
            '</div>' +
        '</div>' +
    '<div class="elem-cont"> Shoes:' +
        '<div class="blocs shoes-blocs1" data-shoes="shoe_2subdiv_shoe.001_0">' +
            '</div>' +
        '</br>' +
        '<div class="blocs shoes-blocs2" data-shoes="shoe_2subdiv_shoe.001_3">' +
            '</div>' +
        '</div>' +
    '</div>';
},{}],"/Applications/MAMP/htdocs/GLTFLoaderDress/js/userUpdate.js":[function(require,module,exports){
'use strict';

var colorContainer = require('./template/update.tpl');
var config = require('./config');

var UserUpdate = function UserUpdate(scene, persona, camera, talking, walking, stretching, mixer) {
    var _this2 = this;

    this.scene = scene;
    this.persona = persona;
    this.camera = camera;
    this.talking = talking;
    this.walking = walking;
    this.stretching = stretching;
    this.mixer = mixer;
    this.container;

    this.targetPosX = this.scene.position.x;
    this.targetPosY = this.scene.position.y;
    this.targetPosZ = this.scene.position.z;
    this.targetRotX = this.scene.rotation.x;
    this.targetRotY = this.scene.rotation.y;
    this.targetRotZ = this.scene.rotation.z;

    this.active = 0;

    this.init = function () {
        this.contUpdate();
        this.updatePos();
        this.rotate();
        this.translate();
        this.zoom();
        this.clickAnim();
        this.faceZoom();
        this.clothes();
    };

    // CONTAINER UPDATE
    this.contUpdate = function () {
        this.container = $('<div class="update-container"></div>');
        $('body').append(this.container);
        this.colorContainer = $(colorContainer);
        this.container.append(this.colorContainer);

        // COLOR BLOCK
        for (var i = 0; i < config.hairColor.length; i++) {
            //hair
            $('.hair-blocs').append('<div class="hair-color hair-color' + i + ' blocs-color"></div>');
            $('.hair-color' + i).css('background', config.hairColor[i]);
        }
        for (var i = 0; i < config.skinColor.length; i++) {
            //skin
            $('.skin-blocs').append('<div class="skin-color skin-color' + i + ' blocs-color"></div>');
            $('.skin-color' + i).css('background', config.skinColor[i]);
        }
        for (var i = 0; i < config.eyesColor.length; i++) {
            //eyes
            $('.eyes-blocs').append('<div class="eyes-color eyes-color' + i + ' blocs-color"></div>');
            $('.eyes-color' + i).css('background', config.eyesColor[i]);
        }
        for (var i = 0; i < config.dressColor.length; i++) {
            //dress
            $('.robe-blocs').append('<div class="robe-color dress-color' + i + ' blocs-color"></div>');
            $('.top-dress-blocs').append('<div class="top-dress-color dress-color' + i + ' blocs-color"></div>');
            $('.shoes-blocs1').append('<div class="shoesP1-color dress-color' + i + ' blocs-color"></div>');
            $('.shoes-blocs2').append('<div class="shoesP2-color dress-color' + i + ' blocs-color"></div>');
            $('.dress-color' + i).css('background', config.dressColor[i]);
        }

        // ASSIGN COLOR
        $('.blocs-color').click(function (e) {
            //console.log($(e.currentTarget).closest('.blocs').data('type'))
            var type = $(e.currentTarget).closest('.blocs').data('type');
            $(e.currentTarget).closest('.blocs').children().removeClass('active');
            $(e.currentTarget).addClass('active');
            config.model.traverse(function (child) {
                if (child.name === type) {
                    //body
                    child.material.emissive = new THREE.Color($(e.currentTarget).css("background-color"));
                }
                /*else if (child.name === 'shoe_2subdiv_shoe.001_0' || child.name === 'shoe_2subdiv_shoe.001_1' || child.name === 'shoe_2subdiv_shoe.001_3'){
                    child.material.color = new THREE.Color($(e.currentTarget).css("background-color"));
                }*/
            });
        });

        $('.blocs-color').click(function (e) {
            //console.log($(e.currentTarget).closest('.blocs').data('shoes'))
            var shoes = $(e.currentTarget).closest('.blocs').data('shoes');
            $(e.currentTarget).closest('.blocs').children().removeClass('active');
            $(e.currentTarget).addClass('active');
            config.model.traverse(function (child) {
                if (child.name === shoes) {
                    child.material.color = new THREE.Color($(e.currentTarget).css("background-color"));
                }
            });
        });
    };

    // ROTATION
    this.rotate = function () {
        var myself = this;
        this.rotate = $('<div class="cont-moove rotate">' + '<div class="rot arrow-left" data-type="left"></div>' + '<div class="rot arrow-right" data-type="right"></div>' + '<div class="rot arrow-top" data-type="top"></div>' + '<div class="rot arrow-bottom" data-type="bottom"></div>' + '</div>');
        this.container.append(this.rotate);

        $('.rot').on('mouseover', function () {
            direction($(this).attr('data-type'));
        });
        function direction(type) {
            if (type === 'right') {
                myself.scene.rotation.y += 0.01;
            }
            if (type === 'left') {
                myself.scene.rotation.y -= 0.01;
            }
            if (type === 'bottom') {
                myself.scene.rotation.x -= 0.01;
            }
            if (type === 'top') {
                myself.scene.rotation.x += 0.01;
            }
            var continious = setTimeout(function () {
                direction(type);
            }, 10);
            $('.arrow-' + type).on('mouseout', function () {
                clearInterval(continious);
            });
        }
    };

    //TRANSLATION
    this.translate = function () {
        var myself = this;
        this.rotate = $('<div class="cont-moove translate">' + '<div class="trans arrow-left" data-type="left"></div>' + '<div class="trans arrow-right" data-type="right"></div>' + '<div class="trans arrow-top" data-type="top"></div>' + '<div class="trans arrow-bottom" data-type="bottom"></div>' + '</div>');
        this.container.append(this.rotate);

        $('.trans').on('mouseover', function () {
            direction($(this).attr('data-type'));
        });
        function direction(type) {
            if (type === 'right') {
                myself.scene.position.x += 0.003;
            }
            if (type === 'left') {
                myself.scene.position.x -= 0.003;
            }
            if (type === 'bottom') {
                myself.scene.position.y -= 0.003;
            }
            if (type === 'top') {
                myself.scene.position.y += 0.003;
            }
            var continious = setTimeout(function () {
                direction(type);
            }, 10);
            $('.arrow-' + type).on('mouseout', function () {
                clearInterval(continious);
            });
        }
    };

    //ZOOM
    this.zoom = function () {
        var myself = this;
        var zoomElement = $('<div class="zoom">' + '<div class="side circle-more" data-type="more">+</div>' + '<div class="side circle-less" data-type="less">-</div>' + '</div>');
        this.container.append(zoomElement);

        $('.side').on('mouseover', function () {
            moreLess($(this).attr('data-type'));
        });
        function moreLess(type) {
            if (type === 'more') {
                myself.scene.position.z += 0.01;
            }
            if (type === 'less') {
                myself.scene.position.z -= 0.01;
            }
            var continious = setTimeout(function () {
                moreLess(type);
            }, 10);
            $('.circle-' + type).on('mouseout', function () {
                clearInterval(continious);
            });
        }
    };
    // Target ZOOM
    this.faceZoom = function () {
        var _this = this;

        var faceZoomElement = $('<div class="face-zoom">' + '<div class="zoom-target face " data-type="face"><img src="./texture/anim/face.png"></div>' + '<div class="zoom-target global" data-type="global"><img src="./texture/anim/global.png"></div>' + '</div>');
        this.container.append(faceZoomElement);
        $('.face').on('click', function () {
            _this.targetPosX = -0.15;
            _this.targetPosY = -0.5;
            _this.targetPosZ = 1.85;
            _this.targetRotX = 0.35;
            _this.targetRotY = -0.5;
            _this.targetRotZ = 0;
            _this.active = 1;
            setTimeout(function () {
                _this.active = 0;
            }, 2000);
        });
        $('.global').on('click', function () {
            _this.targetPosX = 0;
            _this.targetPosY = 0;
            _this.targetPosZ = 0;
            _this.targetRotX = 0.5;
            _this.targetRotY = -0.5;
            _this.targetRotZ = 0;
            _this.active = 1;
            setTimeout(function () {
                _this.active = 0;
            }, 2000);
        });
    };

    // INTERPOLATION
    this.updatePos = function () {
        requestAnimationFrame(_this2.updatePos);
        _this2.scene.position.x += (_this2.targetPosX - _this2.scene.position.x) * 0.1 * _this2.active;
        _this2.scene.position.y += (_this2.targetPosY - _this2.scene.position.y) * 0.1 * _this2.active;
        _this2.scene.position.z += (_this2.targetPosZ - _this2.scene.position.z) * 0.1 * _this2.active;
        _this2.scene.rotation.x += (_this2.targetRotX - _this2.scene.rotation.x) * 0.1 * _this2.active;
        _this2.scene.rotation.y += (_this2.targetRotY - _this2.scene.rotation.y) * 0.1 * _this2.active;
        _this2.scene.rotation.z += (_this2.targetRotZ - _this2.scene.rotation.z) * 0.1 * _this2.active;
        //Valeur actuelle += ( valeur d'arrivé - valeur actuelle ) * easing   *active 0/1 pour eviter le retour constant
    };

    // ANIM Click
    this.clickAnim = function () {
        var _this3 = this;

        var animBlock = $('<div class="anim-content">' + '<p>Animation:</p>' + '<div class="blocs-anim talk"><img src="./texture/anim/talking.png"></div>' + '<div class="blocs-anim walk"><img src="./texture/anim/walking.png"></div>' + '<div class="blocs-anim stretch"><img src="./texture/anim/stretching.png"></div>' + '</div>');
        this.container.append(animBlock);
        $('.talk').on('click', function () {
            _this3.mixer._nActiveActions = 0;
            _this3.talking();
        });
        $('.walk').on('click', function () {
            _this3.mixer._nActiveActions = 0;
            _this3.walking();
        });
        $('.stretch').on('click', function () {
            _this3.mixer._nActiveActions = 0;
            _this3.stretching();
        });
    };

    // ADD DELETE ELEM
    this.clothes = function () {
        var _this4 = this;

        var clothesBlock = $('<div class="clothes-content">' + '<p>Clothes:</p>' + '<div class="blocs-clothes nude"><img src="./texture/anim/nude.png"></div>' + '<div class="blocs-clothes apparel"><img src="./texture/anim/apparel.png"></div>' + '</div>');
        this.container.append(clothesBlock);
        console.log(persona.children[0].children[0]); //elem
        var shoes = this.persona.children[0].children[0].children[3];
        var robeFrou = this.persona.children[0].children[0].children[5];
        var robe = this.persona.children[0].children[0].children[4];
        $('.nude').on('click', function () {
            _this4.persona.children[0].children[0].remove(shoes);
            _this4.persona.children[0].children[0].remove(robeFrou);
            _this4.persona.children[0].children[0].remove(robe);
        });
        $('.apparel').on('click', function () {
            _this4.persona.children[0].children[0].add(shoes);
            _this4.persona.children[0].children[0].add(robeFrou);
            _this4.persona.children[0].children[0].add(robe);
        });
    };

    this.init();
};

module.exports = UserUpdate;

},{"./config":"/Applications/MAMP/htdocs/GLTFLoaderDress/js/config.js","./template/update.tpl":"/Applications/MAMP/htdocs/GLTFLoaderDress/js/template/update.tpl"}]},{},["/Applications/MAMP/htdocs/GLTFLoaderDress/js/app.js"]);
